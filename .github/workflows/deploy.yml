name: Deploy to Digital Ocean

on:
  push:
    branches: [main] # Cambia a 'master' si usas esa rama como principal
    paths-ignore:
      - '**.md' # Ignora cambios en archivos markdown

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          echo "Building API Gateway..."
          npx nx build api-gateway --prod

          echo "Building Auth Service..."
          npx nx build auth-service --prod

          echo "Verifying build artifacts..."
          ls -la dist/apps/api-gateway
          ls -la dist/apps/auth-service

      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.prod
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.prod
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env.prod

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DIGITALOCEAN_HOST }}" ]; then
              echo "Error: DIGITALOCEAN_HOST is not set."
              exit 1
          fi
          if [ -z "${{ secrets.DIGITALOCEAN_USERNAME }}" ]; then
              echo "Error: DIGITALOCEAN_USERNAME is not set."
              exit 1
          fi
          if [ -z "${{ secrets.DIGITALOCEAN_SSH_KEY }}" ]; then
              echo "Error: DIGITALOCEAN_SSH_KEY is not set."
              exit 1
          fi
          # La validación de SSH_PASSPHRASE ya no es necesaria

      - name: List workspace contents before creating package
        run: |
          echo "Listing root directory:"
          ls -la
          echo "---"
          echo "Listing dist/ directory (if it exists):"
          ls -la dist/ || echo "dist/ directory not found"
          echo "---"
          echo "Listing apps/ directory (if it exists):"
          ls -la apps/ || echo "apps/ directory not found"
          echo "---"
          echo "Listing apps/auth-service/ directory (if it exists):"
          ls -la apps/auth-service/ || echo "apps/auth-service/ directory not found"
          echo "---"
          echo "Listing apps/api-gateway/ directory (if it exists):"
          ls -la apps/api-gateway/ || echo "apps/api-gateway/ directory not found"

      - name: Create deployment package
        run: |
          tar -zcvf deployment.tar.gz \
            dist/ \
            docker-compose.prod.yml \
            .env.prod \
            package.json \
            package-lock.json \
            nx.json \
            tsconfig.base.json \
            apps/auth-service/ \
            apps/api-gateway/ \
            libs/
          echo "--- Deployment package contents (deployment.tar.gz) ---"
          tar -ztvf deployment.tar.gz

      - name: Deploy to Digital Ocean (Create Directory)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          debug: true # Mantenido para diagnósticos si es necesario
          script: |
            # Crear directorio del proyecto si no existe
            mkdir -p /home/brainrush/brainrush-app
            # Ir al directorio del proyecto
            cd /home/brainrush/brainrush-app

      - name: Copy deployment package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          source: 'deployment.tar.gz' # Solo copiamos el archivo tar
          target: '/home/brainrush/brainrush-app'
          strip_components: 0

      - name: Extract deployment package on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            cd /home/brainrush/brainrush-app
            tar -zxvf deployment.tar.gz
            rm deployment.tar.gz # Opcional: eliminar el tar después de extraer

      - name: Start Docker containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            cd /home/brainrush/brainrush-app

            # Primero, intenta usar la configuración pre-construida
            if [ -f "docker-compose.pre-built.yml" ]; then
              echo "Usando la versión pre-construida (optimizada)"
              docker-compose -f docker-compose.pre-built.yml down
              docker-compose -f docker-compose.pre-built.yml up -d --build
              DOCKER_EXIT_CODE=$?
            else
              echo "Versión pre-construida no disponible, usando configuración estándar"
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d --build
              DOCKER_EXIT_CODE=$?
            fi

            # Verificar si Docker Compose ha funcionado correctamente
            if [ $DOCKER_EXIT_CODE -ne 0 ]; then
              echo "Error al iniciar los contenedores, intentando con la configuración estándar"
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d --build
            fi

            # Ejecutar migraciones de Prisma (si aplica)
            docker-compose -f docker-compose.prod.yml exec -T auth-service npx prisma migrate deploy

            # Eliminar imágenes antiguas (limpieza)
            docker image prune -af
