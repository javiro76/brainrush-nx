name: Deploy to Digital Ocean (Development)

on:
  push:
    branches: [front-end] # Changed from main to front-end for development
    paths-ignore:
      - '**.md'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications (Development)
        run: |
          echo "Setting environment variables for build..."
          export REACT_APP_API_URL=${{ secrets.DIGITALOCEAN_HOST }}
          echo "REACT_APP_API_URL=$REACT_APP_API_URL"

          echo "Generating Prisma clients..."
          cd apps/auth-service && npx prisma generate && cd ../..
          cd apps/content-service && npx prisma generate && cd ../..
          #cd apps/exams-service && npx prisma generate && cd ../..

          echo "Building API Gateway..."
          npx nx build api-gateway

          echo "Building Auth Service..."
          npx nx build auth-service

          echo "Building Content Service..."
          npx nx build content-service

          echo "Building Frontend with API URL: $REACT_APP_API_URL..."
          npx nx build brainrush-frontend

          echo "Verifying build artifacts..."
          ls -la dist/

      - name: Verify Frontend Build Configuration
        run: |
          echo "Verifying that frontend build contains correct API URL..."
          if grep -q "brain" dist/brainrush-frontend/main.*.js; then
            echo "✅ Frontend build contains correct API URL (brain.me)"
          else
            echo "❌ Frontend build does NOT contain correct API URL"
            echo "Checking what URLs are present:"
            grep -o '"https://[^"]*"\|"http://[^"]*"\|"/api[^"]*"' dist/brainrush-frontend/main.*.js | head -5 || echo "No URLs found"
            exit 1
          fi

      - name: Create .env file for development
        run: |
          # Variables generales
          echo "NODE_ENV=development" > .env
          echo "ENABLE_SWAGGER=true" >> .env
          echo "REACT_APP_API_URL=${{ secrets.DIGITALOCEAN_HOST }}:3335/api" >> .env

          # Auth Service Database (escapar caracteres especiales)
          echo "AUTH_DB_HOST=auth-db" >> .env
          echo "AUTH_DB_PORT=5432" >> .env
          DB_USER="${{ secrets.DB_USER }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          DB_NAME="${{ secrets.DB_NAME }}"
          echo "AUTH_DB_USER=${DB_USER}" >> .env
          echo "AUTH_DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "AUTH_DB_NAME=${DB_NAME}" >> .env
          echo "AUTH_DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@auth-db:5432/${DB_NAME}?schema=public" >> .env

          # Content Service Database (escapar caracteres especiales)
          echo "CONTENT_DB_HOST=content-db" >> .env
          echo "CONTENT_DB_PORT=5432" >> .env
          CONTENT_DB_USER="${{ secrets.CONTENT_DB_USER }}"
          CONTENT_DB_PASSWORD="${{ secrets.CONTENT_DB_PASSWORD }}"
          CONTENT_DB_NAME="${{ secrets.CONTENT_DB_NAME }}"
          echo "CONTENT_DB_USER=${CONTENT_DB_USER}" >> .env
          echo "CONTENT_DB_PASSWORD=${CONTENT_DB_PASSWORD}" >> .env
          echo "CONTENT_DB_NAME=${CONTENT_DB_NAME}" >> .env
          echo "CONTENT_DATABASE_URL=postgresql://${CONTENT_DB_USER}:${CONTENT_DB_PASSWORD}@content-db:5432/${CONTENT_DB_NAME}?schema=public" >> .env

          # Exams Service Database (si existe)
          # echo "EXAMS_DB_HOST=exams-db" >> .env
          # echo "EXAMS_DB_PORT=5432" >> .env
          # echo "EXAMS_DB_USER=${{ secrets.EXAMS_DB_USER }}" >> .env
          # echo "EXAMS_DB_PASSWORD=${{ secrets.EXAMS_DB_PASSWORD }}" >> .env
          # echo "EXAMS_DB_NAME=${{ secrets.EXAMS_DB_NAME }}" >> .env
          # echo "EXAMS_DATABASE_URL=postgresql://${{ secrets.EXAMS_DB_USER }}:${{ secrets.EXAMS_DB_PASSWORD }}@exams-db:5432/${{ secrets.EXAMS_DB_NAME }}?schema=public" >> .env

          # JWT
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env

          # Services URLs
          echo "AUTH_SERVICE_URL=http://auth-service:3334" >> .env
          echo "CONTENT_SERVICE_URL=http://content-service:3336" >> .env
          #echo "EXAMS_SERVICE_URL=http://exams-service:3337" >> .env
          echo "NATS_SERVERS=nats://nats:4222" >> .env
          # Add other necessary development environment variables here

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DIGITALOCEAN_HOST }}" ]; then echo "Error: DIGITALOCEAN_HOST is not set."; exit 1; fi
          if [ -z "${{ secrets.DIGITALOCEAN_USERNAME }}" ]; then echo "Error: DIGITALOCEAN_USERNAME is not set."; exit 1; fi
          if [ -z "${{ secrets.DIGITALOCEAN_SSH_KEY }}" ]; then echo "Error: DIGITALOCEAN_SSH_KEY is not set."; exit 1; fi

      - name: Create deployment package
        run: |
          tar -zcvf deployment.tar.gz \
            dist/ \
            docker-compose.deploy.yml \
            .env \
            package.json \
            package-lock.json \
            nx.json \
            tsconfig.base.json \
            eslint.config.mjs \
            apps/api-gateway/ \
            apps/auth-service/ \
            apps/content-service/ \
            brainrush-frontend/ \
            libs/
          echo "--- Deployment package contents (deployment.tar.gz) ---"
          tar -ztvf deployment.tar.gz

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            # Create directory for the app
            mkdir -p /home/brainrush/brainrush-app
            cd /home/brainrush/brainrush-app

      - name: Copy deployment package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          source: 'deployment.tar.gz'
          target: '/home/brainrush/brainrush-app'

      - name: Deploy and Start Services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            cd /home/brainrush/brainrush-app

            # Extract package
            tar -zxvf deployment.tar.gz
            rm deployment.tar.gz

            # Start containers
            echo "Starting containers with docker-compose.deploy.yml"
            docker-compose -f docker-compose.deploy.yml down
            docker-compose -f docker-compose.deploy.yml up -d --build

            DOCKER_EXIT_CODE=$?
            if [ $DOCKER_EXIT_CODE -ne 0 ]; then
              echo "Error starting containers with docker-compose."
              exit 1
            fi

            # Wait for the database to be ready
            echo "Waiting for database to be ready..."
            sleep 15

            # Run Prisma migrations for development
            echo "Running Prisma migrations for development..."
            docker-compose -f docker-compose.deploy.yml exec -T auth-service npx prisma migrate dev --name init || echo "Auth migration failed or already applied."
            docker-compose -f docker-compose.deploy.yml exec -T content-service npx prisma migrate dev --name init || echo "Content migration failed or already applied."
            #docker-compose -f docker-compose.deploy.yml exec -T exams-service npx prisma migrate dev --name init || echo "Exams migration failed or already applied."

            # Clean up old Docker images
            echo "Pruning old Docker images..."
            docker image prune -af
