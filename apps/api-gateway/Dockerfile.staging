# ==========================================
# Multi-stage build - Reduce de 4GB a 400MB
# ==========================================

# Stage 1: Builder (esta imagen se descarta)
FROM node:22-alpine AS builder

WORKDIR /app

# Install build dependencies (solo para build)
RUN apk add --no-cache python3 make g++

# Copy package files and nx config
COPY package*.json nx.json tsconfig.base.json eslint.config.mjs ./
COPY apps/api-gateway/eslint.config.mjs ./apps/api-gateway/
COPY apps/api-gateway/project.json ./apps/api-gateway/
COPY apps/auth-service/project.json ./apps/auth-service/
COPY libs/ ./libs/

# Install ALL dependencies (dev + production)
RUN npm install

# Copy Prisma schema del auth-service
COPY apps/auth-service/prisma ./apps/auth-service/prisma/

# Generate auth-client (para UserRole y autorizaciÃ³n)
RUN npx prisma generate --schema=./apps/auth-service/prisma/schema.prisma

# Copy source code and build
COPY . .
RUN npx nx build api-gateway

# ðŸš€ CLAVE: Limpiar y crear node_modules SOLO de producciÃ³n
RUN rm -rf node_modules && \
  npm ci --omit=dev --ignore-scripts && \
  npm cache clean --force

# Stage 2: Runtime (IMAGEN FINAL PEQUEÃ‘A)
FROM node:22-alpine

WORKDIR /app

# Install ONLY runtime tools (sin build tools)
RUN apk add --no-cache curl dumb-init

# Copy ONLY built application
COPY --from=builder /app/dist/apps/api-gateway ./

# Copy ONLY production node_modules (ya filtrados y sin bcrypt issues)
COPY --from=builder /app/node_modules ./node_modules

# Environment for production-like staging
ENV NODE_ENV=development

# Expose port
EXPOSE 3335

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3335/health || exit 1

# Start application
CMD ["dumb-init", "node", "main.js"]
