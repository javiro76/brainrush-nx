# ==========================================
# Optimized deployment con dependencies m√≠nimas
# ==========================================

# Stage 1: Dependencies
FROM node:22-alpine AS deps

WORKDIR /app

# Build dependencies para Prisma
RUN apk add --no-cache openssl

# Copy package files
COPY package*.json ./

# Install ONLY production dependencies (sin build tools pesados)
RUN npm ci --omit=dev --ignore-scripts --no-audit --no-fund

# Generate Prisma client
COPY apps/auth-service/prisma ./apps/auth-service/prisma/
RUN npx prisma generate --schema=./apps/auth-service/prisma/schema.prisma

# Stage 2: Runtime
FROM node:22-alpine

WORKDIR /app

# Runtime dependencies
RUN apk add --no-cache curl dumb-init openssl postgresql-client

# Copy pre-built application from pipeline
COPY dist/apps/auth-service ./

# Copy ONLY production node_modules (necesarios para runtime)
COPY --from=deps /app/node_modules ./node_modules

# Copy Prisma schemas and entrypoint
COPY --from=deps /app/apps/auth-service/prisma ./prisma
COPY apps/auth-service/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

ENV NODE_ENV=development
EXPOSE 3334

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["dumb-init", "node", "main.js"]
