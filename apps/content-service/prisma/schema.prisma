generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/.prisma/content-client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Area {
  id           String        @id
  nombre       String
  descripcion  String
  afirmaciones Afirmacion[]
  competencias Competencia[]
  preguntas    Pregunta[]
}

model Competencia {
  id           String       @id
  areaId       String
  nombre       String
  descripcion  String
  afirmaciones Afirmacion[]
  area         Area         @relation(fields: [areaId], references: [id])
}

model Afirmacion {
  id            String      @id
  areaId        String
  numero        Int
  descripcion   String
  tipo          String
  competenciaId String
  area          Area        @relation(fields: [areaId], references: [id])
  competencia   Competencia @relation(fields: [competenciaId], references: [id])
  preguntas     Pregunta[]
}

model TipoTexto {
  id          String @id
  nombre      String
  descripcion String
}

model NivelComplejidad {
  id          String @id
  nombre      String
  descripcion String
}

model NivelIngles {
  id          String @id
  nombre      String
  descripcion String
}

model TaxonomiaBloom {
  id          String                @id
  nombre      String
  descripcion String
  textos      TextoTaxonomiaBloom[]
}

model Texto {
  id               String                @id
  fuente           String?
  contenido        String
  tipoTexto        String?
  subtipo          String?
  nivelLectura     String?
  palabrasClave    String[]
  fechaCreacion    DateTime?             @default(now())
  contadorPalabras Int?
  dificultadLexica String?
  estado           String?               @default("borrador")
  imagen           String?
  preguntas        Pregunta[]
  taxonomiaBloom   TextoTaxonomiaBloom[]
}

model TextoTaxonomiaBloom {
  textoId          String
  taxonomiaBloomId String
  taxonomiaBloom   TaxonomiaBloom @relation(fields: [taxonomiaBloomId], references: [id])
  texto            Texto          @relation(fields: [textoId], references: [id])

  @@id([textoId, taxonomiaBloomId])
}

model Pregunta {
  id             String      @id
  areaId         String
  textoId        String?
  complejidad    String
  enunciado      String
  justificacion  String
  afirmacionId   String?
  habilidadId    String?
  taxonomiaBloom String?
  fechaCreacion  DateTime?   @default(now())
  activo         Boolean     @default(true)
  opciones       Opcion[]
  afirmacion     Afirmacion? @relation(fields: [afirmacionId], references: [id])
  area           Area        @relation(fields: [areaId], references: [id])
  texto          Texto?      @relation(fields: [textoId], references: [id])
}

model Opcion {
  id                String   @id @default(uuid())
  preguntaId        String
  textoOpcion       String
  esCorrecta        Boolean  @default(false)
  retroalimentacion String?
  orden             Int?
  pregunta          Pregunta @relation(fields: [preguntaId], references: [id])
}
