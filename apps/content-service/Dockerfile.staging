# ==========================================
# Multi-stage build optimizado
# ==========================================

# Stage 1: Builder
FROM node:22-alpine AS builder

WORKDIR /app

# Build dependencies
RUN apk add --no-cache python3 make g++ openssl

# Copy package files
COPY package*.json nx.json tsconfig.base.json eslint.config.mjs ./
COPY apps/auth-service/project.json ./apps/auth-service/
COPY apps/content-service/eslint.config.mjs ./apps/content-service/
COPY apps/content-service/project.json ./apps/content-service/
COPY libs/ ./libs/

# Install ALL dependencies first
RUN npm install --legacy-peer-deps

# Copy and generate Prisma clients
COPY apps/auth-service/prisma ./apps/auth-service/prisma/
COPY apps/content-service/prisma ./apps/content-service/prisma/
RUN npx prisma generate --schema=./apps/auth-service/prisma/schema.prisma
RUN npx prisma generate --schema=./apps/content-service/prisma/schema.prisma

# Build application
COPY . .
RUN npx nx build content-service

# Create production node_modules (SIN dependencias de desarrollo)
RUN rm -rf node_modules && \
    npm ci --omit=dev --ignore-scripts

# Stage 2: Runtime
FROM node:22-alpine

WORKDIR /app

# Runtime dependencies
RUN apk add --no-cache curl dumb-init openssl postgresql-client

# Copy built app
COPY --from=builder /app/dist/apps/content-service ./

# Copy ONLY production node_modules (Ya filtrados)
COPY --from=builder /app/node_modules ./node_modules

# Copy Prisma schemas and entrypoint
COPY --from=builder /app/apps/content-service/prisma ./prisma
COPY apps/content-service/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

ENV NODE_ENV=development
EXPOSE 3336

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["dumb-init", "node", "main.js"]
